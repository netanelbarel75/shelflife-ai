version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: shelflife-postgres
    environment:
      POSTGRES_DB: shelflife
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - shelflife-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: shelflife-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - shelflife-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shelflife-backend
    environment:
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/shelflife
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - TESSERACT_PATH=/usr/bin/tesseract
    volumes:
      - ./backend:/app
      - receipt_uploads:/app/uploads
      - ml_models:/app/ml-model/models
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - shelflife-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: shelflife-nginx
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf
      - receipt_uploads:/var/www/uploads:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - shelflife-network
    profiles:
      - production

  # ML Training Service (optional)
  ml-trainer:
    build:
      context: ./ml-model
      dockerfile: Dockerfile
    container_name: shelflife-ml-trainer
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/shelflife
    volumes:
      - ml_models:/app/models
      - ./ml-model:/app
    depends_on:
      - postgres
    networks:
      - shelflife-network
    profiles:
      - ml-training

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  receipt_uploads:
    driver: local
  ml_models:
    driver: local

networks:
  shelflife-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
